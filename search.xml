<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[STL] Unordered Map</title>
      <link href="/zzz.github.io/2025/04/23/stl_con/"/>
      <url>/zzz.github.io/2025/04/23/stl_con/</url>
      
        <content type="html"><![CDATA[<h2 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h2><p><code>Unordered_map</code><br>实现了基于哈希表的映射，能够通过哈希算法快速地进行键值对查找、插入和删除操作。主要优点是查找、插入和删除的平均时间复杂度为 O(1)，适用于需要快速查找的场景。</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显式声明</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;::iterator it = map.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">//自动声明</span></span><br><span class="line"><span class="keyword">auto</span> it = map.<span class="built_in">begin</span>(); <span class="comment">//位置在容器开头</span></span><br><span class="line"><span class="keyword">auto</span> it = map.<span class="built_in">end</span>(); <span class="comment">//位置在容器结尾</span></span><br><span class="line"><span class="keyword">auto</span> it = map.<span class="built_in">find</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">//位置在key=&#x27;banana&#x27;上</span></span><br></pre></td></tr></table></figure><p><code>.find(key)</code><br>查找对应键，若没找到则返回end()位置<br><code>map[key] = value</code><br>插入键值对，若已存在则会覆盖原本的元素<br><code>.insert(&#123;key,value&#125;)</code><br>插入键值对，若已存在则<strong>不会</strong>覆盖原本的元素<br><code>.erase(key)</code><br>删除key对应的键值对，并返回对应key数量<br><code>.erase(iterator)</code><br>删除iterator所在位置的键值对<br><code>.erase(first, second)</code><br>删除first和second两个迭代器之间的元素<br><code>.empty()</code><br>判断是否为空，为空返回true, 不为空返回false<br><code>.size()</code><br>返回大小<br><code>.clear()</code><br>清空全部<br><code>.begin()</code><br>开头位置<br><code>.end()</code><br>结尾位置<br><code>.count(key)</code><br>key对应元素个数, 通常为0或1<br><code>.equal_range(key)</code><br>返回first和second两个迭代器, first指向所找到的第一个key对应元素，second指向最后一个，对于unordered_map来说, second指向.end()<br><code>swap(map1, map2)</code><br>交换两个容器的内容  </p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt; ht;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">18</span>;</span><br><span class="line">    <span class="comment">// 统计词数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">    &#123;</span><br><span class="line">        string word;</span><br><span class="line">        cin &gt;&gt; word;</span><br><span class="line">        ht[word]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1. 范围遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; pair: ht) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 修改值</span></span><br><span class="line">        <span class="keyword">if</span> (pair.first == <span class="string">&quot;apple&quot;</span>)     </span><br><span class="line">            pair.second += <span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; pair.first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; pair.second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 使用迭代器遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = ht.<span class="built_in">begin</span>(); it != ht.<span class="built_in">end</span>(); ++it) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 修改值</span></span><br><span class="line">        <span class="keyword">if</span> (it-&gt;first == <span class="string">&quot;apple&quot;</span>)</span><br><span class="line">            it-&gt;second = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 删除键-值对</span></span><br><span class="line">        <span class="keyword">if</span> (it-&gt;first == <span class="string">&quot;banana&quot;</span>)</span><br><span class="line">            it = ht.<span class="built_in">erase</span>(it); </span><br><span class="line">        cout  &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找</span></span><br><span class="line">    string key = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (ht.<span class="built_in">find</span>(key) != ht.<span class="built_in">end</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Found &#x27;&quot;</span> &lt;&lt; key &lt;&lt; <span class="string">&quot;&#x27; with count: &quot;</span> &lt;&lt; ht[key] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&#x27;&quot;</span> &lt;&lt; key &lt;&lt; <span class="string">&quot;&#x27; not found.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用迭代器查找</span></span><br><span class="line">    <span class="keyword">auto</span> it = ht.<span class="built_in">find</span>(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != ht.<span class="built_in">end</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Found apple, value: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;apple not found.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    ht[<span class="string">&quot;dragonfruit&quot;</span>] = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Inserted &#x27;dragonfruit&#x27; with count: &quot;</span> &lt;&lt; ht[<span class="string">&quot;dragonfruit&quot;</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">if</span> (ht.<span class="built_in">erase</span>(<span class="string">&quot;banana&quot;</span>)) </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&#x27;banana&#x27; removed successfully.\n&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;&#x27;banana&#x27; not found, nothing removed.\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断为空</span></span><br><span class="line">    <span class="keyword">if</span> (!ht.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;map is not empty.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;map is empty.\n&quot;</span>);</span><br><span class="line">    <span class="comment">//输出大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ht.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">apple durian banana pineapple banana apple banana durian durian apple</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">pineapple: 1</span><br><span class="line">banana: 3</span><br><span class="line">durian: 3</span><br><span class="line">apple: 4</span><br><span class="line">pineapple: 1</span><br><span class="line">durian: 3</span><br><span class="line">apple: 10</span><br><span class="line">Found &#x27;apple&#x27; with count: 10</span><br><span class="line">Found apple, value: 10</span><br><span class="line">Inserted &#x27;dragonfruit&#x27; with count: 10</span><br><span class="line">&#x27;banana&#x27; not found, nothing removed.</span><br><span class="line">map is not empty.</span><br><span class="line">4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[STL] Graph Representation with vector in C++</title>
      <link href="/zzz.github.io/2025/04/23/Post1/"/>
      <url>/zzz.github.io/2025/04/23/Post1/</url>
      
        <content type="html"><![CDATA[<h2 id="Directed-unweighted-graph"><a href="#Directed-unweighted-graph" class="headerlink" title="Directed unweighted graph"></a>Directed unweighted graph</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2025</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; map[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    map[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : map[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Node %d is connected to %d&quot;</span>, i, edge);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n,e;</span><br><span class="line">    <span class="comment">// n节点数量, e边数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;e; i++)&#123;</span><br><span class="line">        <span class="type">int</span> n1,n2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n1, &amp;n2);</span><br><span class="line">        <span class="built_in">build</span>(n1,n2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printmap</span>(n);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">3 4</span><br><span class="line">0 1</span><br><span class="line">1 2</span><br><span class="line">0 2</span><br><span class="line">2 0</span><br><span class="line">Output:</span><br><span class="line">Node 0 is connected to 1</span><br><span class="line">Node 0 is connected to 2</span><br><span class="line">Node 1 is connected to 2</span><br><span class="line">Node 2 is connected to 0</span><br></pre></td></tr></table></figure><h2 id="Directed-weighted-graph"><a href="#Directed-weighted-graph" class="headerlink" title="Directed weighted graph"></a>Directed weighted graph</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2025</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; map[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    map[u].<span class="built_in">emplace_back</span>(v, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : map[i]) &#123;</span><br><span class="line">            <span class="comment">//pair包含两个对象.first和.second</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Node %d is connected to %d, cost is %d&quot;</span>, i, edge.first, edge.second);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// n节点数量, e边数</span></span><br><span class="line">    <span class="type">int</span> n,e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;e; i++)&#123;</span><br><span class="line">        <span class="type">int</span> n1,n2,c;</span><br><span class="line">        <span class="comment">//n1到n2的代价是c</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n1, &amp;n2, &amp;c);</span><br><span class="line">        <span class="built_in">build</span>(n1,n2,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printmap</span>(n);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">5 7</span><br><span class="line">0 1 2</span><br><span class="line">1 2 3</span><br><span class="line">0 3 2</span><br><span class="line">2 4 1</span><br><span class="line">3 4 0</span><br><span class="line">4 1 3</span><br><span class="line">1 4 1</span><br><span class="line">Output:</span><br><span class="line">Node 0 is connected to 1, cost is 2</span><br><span class="line">Node 0 is connected to 3, cost is 2</span><br><span class="line">Node 1 is connected to 2, cost is 3</span><br><span class="line">Node 1 is connected to 4, cost is 1</span><br><span class="line">Node 2 is connected to 4, cost is 1</span><br><span class="line">Node 3 is connected to 4, cost is 0</span><br><span class="line">Node 4 is connected to 1, cost is 3</span><br></pre></td></tr></table></figure><h2 id="Undirected-weighted-graph"><a href="#Undirected-weighted-graph" class="headerlink" title="Undirected weighted graph"></a>Undirected weighted graph</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2025</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; map[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    map[u].<span class="built_in">emplace_back</span>(v, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; edge : map[i]) &#123;</span><br><span class="line">            <span class="comment">//pair包含两个对象.first和.second</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Node %d is connected to %d, cost is %d&quot;</span>, i, edge.first, edge.second);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// n节点数量, e边数</span></span><br><span class="line">    <span class="type">int</span> n,e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n,&amp;e);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;e; i++)&#123;</span><br><span class="line">        <span class="type">int</span> n1,n2,c;</span><br><span class="line">        <span class="comment">//n1到n2的代价是c</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n1, &amp;n2, &amp;c);</span><br><span class="line">        <span class="built_in">build</span>(n1,n2,c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printmap</span>(n);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">5 7</span><br><span class="line">0 1 2</span><br><span class="line">1 2 1</span><br><span class="line">0 2 3</span><br><span class="line">0 3 1</span><br><span class="line">2 3 2</span><br><span class="line">1 3 3</span><br><span class="line">0 4 1</span><br><span class="line">Output:</span><br><span class="line">Node 0 is connected to 1, cost is 2</span><br><span class="line">Node 0 is connected to 2, cost is 3</span><br><span class="line">Node 0 is connected to 3, cost is 1</span><br><span class="line">Node 0 is connected to 4, cost is 1</span><br><span class="line">Node 1 is connected to 0, cost is 2</span><br><span class="line">Node 1 is connected to 2, cost is 1</span><br><span class="line">Node 1 is connected to 3, cost is 3</span><br><span class="line">Node 2 is connected to 1, cost is 1</span><br><span class="line">Node 2 is connected to 0, cost is 3</span><br><span class="line">Node 2 is connected to 3, cost is 2</span><br><span class="line">Node 3 is connected to 0, cost is 1</span><br><span class="line">Node 3 is connected to 2, cost is 2</span><br><span class="line">Node 3 is connected to 1, cost is 3</span><br><span class="line">Node 4 is connected to 0, cost is 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About me</title>
      <link href="/zzz.github.io/about/index.html"/>
      <url>/zzz.github.io/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="👋-Welcome-to-my-blog"><a href="#👋-Welcome-to-my-blog" class="headerlink" title="👋 Welcome to my blog"></a>👋 <strong>Welcome to my blog</strong></h1><p> I’m currently a Master’s student in <strong>Engineering Science</strong> at the <strong>Faculty of Engineering, University of Malaya</strong>.</p><p> My research focuses on the intersection of <strong>Artificial Intelligence</strong> and <strong>Cognitive Science</strong>.</p><p>📝 On this blog, I share:  </p><ul><li>📚 <strong>Learning journey</strong></li><li>💭 <strong>Daily thoughts</strong></li><li>💻 <strong>Code</strong></li></ul><p>Feel free to connect or leave a comment.</p>]]></content>
      
    </entry>
    
    
  
</search>
